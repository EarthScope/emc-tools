{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EMC User Guide","text":""},{"location":"#introduction","title":"Introduction","text":"<p>The Earth Model Collaboration (EMC) is a community-supported repository of Earth models that enables researchers to share, preview, and access diverse geophysical Earth models. To support this effort, we provide EMC-Tools, a suite of Python 3 utilities, that streamline the storage, extraction, and visualization of these models. By adopting a uniform, self-contained data format, the tools ensure consistency across contributions and promote the long-term usability of Earth models within the community.  </p>"},{"location":"#model-files","title":"Model Files","text":"<p>This section describes the structure of EMC model files and the ways they can be accessed.</p>"},{"location":"#standards-and-conventions","title":"Standards and Conventions","text":"<p>All EMC models follow a set of metadata and format standards to ensure compatibility across tools. See the Model Files Standards and Conventions for complete details.</p>"},{"location":"#access","title":"Access","text":"<p>EMC model files are available through both direct downloads and interactive tools. The resources below make it easy to obtain NetCDF files from the EarthScope data archive and to explore models dynamically with a filtering and access API.</p> <ul> <li>EMC Model File Server \u2014 access NetCDF model files directly from the EarthScope data archive.  </li> <li>EMC Model Filtering &amp; Access API \u2014 interactively filter, explore, visualize, and download Earth model files.  </li> </ul>"},{"location":"#emc-tools","title":"EMC-Tools","text":"<p>The EMC-Tools suite provides utilities for validating metadata, exploring models, and converting between common geophysical data formats.</p>"},{"location":"#tool-guides","title":"Tool Guides","text":"<p>The guides below provide step-by-step instructions for using the core EMC-Tools utilities.</p> <ul> <li>EMC Metadata Inspector \u2014 validate a NetCDF file against EarthScope\u2019s EMC conventions and common CF metadata expectations.   </li> <li>EMC Model Explorer \u2014 an interactive command-line tool for exploring, visualizing, and exporting Earth model data from local NetCDF files.  </li> </ul>"},{"location":"#format-converter-guides","title":"Format Converter Guides","text":"<p>The following guides cover utilities for format conversion:</p> <ul> <li>GeoCSV to NetCDF Converter \u2014 convert a GeoCSV Earth model (2D or 3D, including projected grids) into a compressed NetCDF-4 Classic file that follows EMC conventions.  </li> <li>NetCDF to GeoCSV Converter \u2014 convert a 2D or 3D NetCDF Earth model into GeoCSV 2.0.  </li> <li>NetCDF Metadata to GeoJSON Converter \u2014 convert a NetCDF Earth model file into a GeoJSON footprint containing both the geographic bounding box and key metadata.  </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Follow these steps to begin using EMC-Tools:</p> <ol> <li>Install Python 3.8+ and dependencies from <code>requirements.txt</code>.  </li> <li>Explore the Tool Guides listed above.  </li> <li>Test with sample datasets in the <code>samples/</code> directory.  </li> <li>Follow EMC standards when preparing or submitting models.  </li> </ol> <p>Tip: EMC-Tools is actively maintained. Always check the GitHub repository for the latest updates before using the tools.</p>"},{"location":"#additional-resources","title":"Additional Resources","text":"<p>The following resources provide standards, guidelines, and workflows for contributing and maintaining EMC models.</p> <ul> <li>Model Files Standards and Conventions \u2014 define supported file formats, metadata requirements, and coordinate systems to ensure consistency across EMC model files.  </li> <li>Contribute Models to EMC \u2014 provide guidelines for contributing new models to EMC.  </li> <li>Convert CSV Files to GeoCSV \u2014 describe how to convert a plain CSV table into a valid GeoCSV file that EMC tools can ingest.  </li> <li>Update an Existing Model \u2014 explain how to update an existing Earth model in EMC.  </li> </ul> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"how-to/emc-explorer-user-guide/","title":"EMC Explorer User Guide","text":""},{"location":"how-to/emc-explorer-user-guide/#introduction","title":"Introduction","text":"<p>The EMC Explorer is an interactive command-line tool for exploring, visualizing, and exporting Earth model data from NetCDF files. It supports:</p> <ul> <li>Metadata inspection</li> <li>2D surface plotting</li> <li>Depth slices</li> <li>Cross-sections</li> <li>Geographic map rendering</li> <li>Data export in NetCDF, CSV, and GeoCSV formats</li> </ul>"},{"location":"how-to/emc-explorer-user-guide/#1-quick-start","title":"1. Quick Start","text":"<pre><code># Run the tool\npython src/emc_explorer.py -i samples/CSEM2-Africa.v2024.12.01.r0.0-n4c.nc\n</code></pre> <p>You will see an interactive menu where you can choose tools and actions.</p>"},{"location":"how-to/emc-explorer-user-guide/#2-navigation-basics","title":"2. Navigation Basics","text":"<p>At each step, you will be prompted with available actions. <pre><code>[TIP] Type 'h' for hints at any prompt.\n[TIP] Press Enter to accept default values (if provided)\n\nChoose an option\n----------------\n  - meta   \u2014 view file metadata\n  - range  \u2014 show variable ranges\n  - subset \u2014 volume / slice / xsection / surface\n  - map    \u2014 show coverage map\n  - help   \u2014 usage\n  - exit   \u2014 quit\n[data] select option [meta, range, subset, map, help, exit | h]?\n</code></pre></p>"},{"location":"how-to/emc-explorer-user-guide/#21-metadata-inspection-meta","title":"2.1 Metadata Inspection (<code>meta</code>)","text":"<p>Lists dataset-level attributes and variable metadata.</p> <pre><code>[data] select option [meta, range, subset, map, help, exit | h]? \n\n  exit       Quit the tool\n  help       Print usage text\n  map        Show coverage map (if lat/lon available)\n  meta       View global attributes, coords, and variables &lt;------ 2.1\n  range      Show min/max for coords and variables  &lt;------ 2.2\n  subset     Enter sub-menu: volume/slice/xsection/surface\n</code></pre> <pre><code>[data] select option [meta, range, subset, map, help, exit | h]? meta\n\n========================================================================\nMetadata (3D)\n========================================================================\n\nGlobal attributes (geospatial*)\n-------------------------------\n  \u2022 geospatial_lat_units: degrees_north\n  \u2022 geospatial_lat_resolution: 2.0\n  \u2022 geospatial_lon_units: degrees_east\n  \u2022 geospatial_lon_resolution: 2.0\n  \u2022 geospatial_vertical_units: km\n  \u2022 geospatial_vertical_positive: down\n  \u2022 geospatial_lat_min: -54.0\n  \u2022 geospatial_lat_max: 46.0\n  \u2022 geospatial_lon_min: -28.0\n  \u2022 geospatial_lon_max: 62.0\n  \u2022 geospatial_vertical_min: 0\n  \u2022 geospatial_vertical_max: 1200\n\nCoordinate Variables\n--------------------\n  depth:\n  ...\n</code></pre>"},{"location":"how-to/emc-explorer-user-guide/#22-range-inspection-range","title":"2.2 Range Inspection (<code>range</code>)","text":"<p>Show min/max for coords and variables.</p> <pre><code>[data] select option [meta, range, subset, map, help, exit | h]? range\n\n========================================================================\nRanges (3D)\n========================================================================\n\nCoordinate Variables\n--------------------\n  \u2022 depth: 0.00 to 1200.00 kilometers\n  \u2022 latitude: -54.00 to 46.00 degrees_north\n  \u2022 longitude: -28.00 to 62.00 degrees_east\n\nData Variables\n--------------\n  \u2022 VSV: 2.44 to 6.62 km/s\n  \u2022 VSH: 2.64 to 6.63 km/s\n  \u2022 VPV: 4.76 to 11.93 km/s\n  \u2022 VPH: 4.76 to 11.93 km/s\n  \u2022 RHO: 2024.27 to 4694.88 kg/m^3\n</code></pre>"},{"location":"how-to/emc-explorer-user-guide/#3-tool-reference-subset","title":"3. Tool Reference (<code>subset</code>)","text":"<pre><code>[subset] select [volume, slice, xsection, surface, back, exit | h]?\n\n  back       Return to main menu\n  exit       Quit the tool\n  slice      Slice along one coordinate (e.g., depth)\n  surface    Surface plot of a 2D variable\n  volume     Extract a subvolume (limits for each dimension)\n  xsection   Interpolated vertical cross-section along a path\n</code></pre>"},{"location":"how-to/emc-explorer-user-guide/#31-surface-plotting-surface","title":"3.1 Surface Plotting (<code>surface</code>)","text":"<p>Generates plots of 2D model variables.</p> <p>Workflow: 1. Select a 2D variable from the list. 2. Enter dimension limits (blank for full range). 3. Choose an action (<code>plot2d</code>, <code>gmap</code>, <code>cmap</code>, <code>save</code>).</p> <p>Example: <pre><code>[surface] variable ['var1', 'var2'] (back/exit)? var1\n[surface-var1] latitude limits (back/exit)? -10,10\n[surface-var1] longitude limits (back/exit)? 100,120\n</code></pre></p>"},{"location":"how-to/emc-explorer-user-guide/#32-depth-slice-slice-depth","title":"3.2 Depth Slice (<code>slice-depth</code>)","text":"<p>Plots slices at a given depth for 3D variables.</p> <p>Example: <pre><code>[slice-depth] variable ['VSV', 'VSH', 'VS', ...] (back/exit)? VSV\n[slice-depth] value (back/exit)? 100 (See Figure 1)\n</code></pre></p> <p>Actions available: - <code>plot2d</code> \u2013 Depth slice plot - <code>plot3d</code> \u2013 3D rendering - <code>gmap</code> \u2013 Geographic overlay - <code>cmap</code> \u2013 Change colormap - <code>save</code> \u2013 Save the slice</p> <p>Depth Slice gmap: </p>"},{"location":"how-to/emc-explorer-user-guide/#33-cross-section-xsection","title":"3.3 Cross-Section (<code>xsection</code>)","text":"<p>Plots data along a transect between two points.</p> <p>Steps: 1. Select a variable. 2. Enter start and end coordinates. 3. Set cross-section width. 4. Choose plotting method.</p> <p>xsection: </p>"},{"location":"how-to/emc-explorer-user-guide/#4-saving-data-save","title":"4. Saving Data (<code>save</code>)","text":"<p>When using <code>save</code>, you will be prompted for: - Output format (NetCDF, CSV, GeoCSV) - Output filename</p> <p>Only the currently selected variable subset will be saved.</p> <p>Example: <pre><code>[save] filename,type (e.g., out,netcdf | back/exit, h)? test,netcdf\n</code></pre> will save as test.nc</p>"},{"location":"how-to/emc-explorer-user-guide/#5-changing-colormaps-cmap","title":"5. Changing Colormaps (<code>cmap</code>)","text":"<p>You can type <code>list</code> to see all available colormaps.</p> <p>Example: <pre><code>[cmap] name or 'name,vmin,vmax' (type 'list' to see available cmaps)? list\nAvailable colormaps (170):\nmagma, inferno, plasma, viridis, ...\n</code></pre></p> <p>After listing, you will be prompted again to enter your choice.</p> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/","title":"GeoCSV to NetCDF Converter User Guide","text":""},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#introduction","title":"Introduction","text":"<p>The <code>GeoCSV_2_netCDF.py</code> script converts a  GeoCSV Earth model (2D or 3D, including projected grids) into a compressed NetCDF-4 Classic (<code>NETCDF4_CLASSIC</code>) file that follows EMC conventions.  This ensures compatibility with EMC standards, improves data sharing, and supports long-term usability of Earth model files.  </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#usage-examples","title":"Usage Examples","text":"<pre><code># From the repository root\npython src/GeoCSV_2_netCDF.py -i data/my_model.csv\n# \u2192 writes data/my_model.nc (NETCDF4_CLASSIC)\n</code></pre> <p>Show headers only (no output .nc created): <pre><code>python src/GeoCSV_2_netCDF.py -i data/my_model.csv -H\n</code></pre></p> <p>Verbose debugging: <pre><code>python src/GeoCSV_2_netCDF.py -i data/my_model.csv -d\n</code></pre></p> <p>Output: One NetCDF file named like the input (same base name), e.g., <code>my_model.nc</code>.</p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#functionality-overview","title":"Functionality Overview","text":"<ul> <li>Parses a GeoCSV file that includes a metadata header (lines beginning with <code>#</code>), a header row, and data rows.  </li> <li>Detects 2D (Y, X) or 3D (Z, Y, X) grids and sorts input accordingly.  </li> <li>Creates coordinate variables (<code>y</code>, <code>x</code>, and optionally <code>z</code>) and model variables with attributes from the GeoCSV header.  </li> <li>Writes a NETCDF4_CLASSIC file with zlib compression (no chunking).  </li> <li>Preserves and extends provenance via the <code>history</code> global attribute.  </li> </ul>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.8+  </li> <li>Packages:  </li> <li><code>netCDF4</code> </li> <li><code>numpy</code> </li> </ul> <p>Install (example): <pre><code>pip install netCDF4 numpy\n</code></pre></p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#command-line-usage","title":"Command-Line Usage","text":"<pre><code>GeoCSV_2_netCDF.py -i FILE [-d] [-H]\n</code></pre> Option Meaning <code>-i, --input</code> Required. Path to the input GeoCSV file. <code>-d, --debug</code> Debug/verbose mode (prints details while processing). <code>-H, --header</code> Header-only mode. Parses headers and prints both GeoCSV and derived NetCDF headers, but does not write a <code>.nc</code> file. <p>Exit codes: <code>0</code> on success; non\u2011zero for input/validation errors.  </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#input-geocsv-expectations","title":"Input: GeoCSV Expectations","text":"<p>A GeoCSV file is a text file with two major parts:  </p> <ol> <li> <p>Metadata header: lines starting with <code>#</code> containing key\u2013value pairs, e.g.: <pre><code># key: value\n# key_subkey: value\n</code></pre></p> </li> <li> <p>Tabular data: a header row with column names, followed by rows of values.  </p> </li> </ol>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#header-templates","title":"Header Templates","text":"<p>When preparing a GeoCSV file, you should use one of the header templates provided in the <code>samples/</code> folder as a starting point. These templates include the required coordinate definitions, variable attributes, and formatting conventions expected by EMC-Tools:</p> <ul> <li><code>samples/header_2D.csv</code> \u2014 template for 2D models (<code>y</code>, <code>x</code>)  </li> <li><code>samples/header_3D.csv</code> \u2014 template for 3D models (<code>z</code>, <code>y</code>, <code>x</code>)  </li> <li><code>samples/header_3D_projected.csv</code> \u2014 template for projected 3D grids (e.g., UTM with latitude/longitude auxiliary coordinates)  </li> </ul> <p>These templates ensure that all required metadata keys (coordinates, delimiter, and variable attributes) are defined correctly and consistently.  </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#2d-vs-3d-models","title":"2D vs 3D Models","text":"<ul> <li>The script infers max dimensions from variable blocks.  </li> <li>If any variable declares <code>dimensions: 3</code>, the dataset is treated as 3D and expects a <code>z</code> column.  </li> </ul> <p>Sorting: - 3D: <code>(z, y, x)</code> - 2D: <code>(y, x)</code> </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#output-netcdf-structure","title":"Output: NetCDF Structure","text":"<ul> <li>File format: <code>NETCDF4_CLASSIC</code> </li> <li>Compression: zlib enabled, <code>complevel=4</code>, <code>shuffle=True</code> (no chunking)  </li> <li>Dimensions:  </li> <li>2D: <code>(y, x)</code> </li> <li>3D: <code>(z, y, x)</code> </li> <li>Coordinate variables: derived from <code>y</code>, <code>x</code>, and (if 3D) <code>z</code>.  </li> <li>Model variables: created from variable sections; attributes copied from GeoCSV header.  </li> <li>Global attributes: copied from <code># global_*</code> entries; <code>history</code> always updated.  </li> </ul> <p>Data type: defaults to <code>f4</code> unless <code>VAR_DTYPE</code> is changed to <code>f8</code> in the script.  </p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#typical-geocsv-example-2d","title":"Typical GeoCSV Example (2D)","text":"<pre><code># delimiter: ,\n# x_column: longitude\n# y_column: latitude\n\n# vp_column: Vp\n# vp_variable: vp\n# vp_dimensions: 2\n# vp_units: km/s\n# vp_long_name: P-wave velocity\n# vp_display_name: Vp\n# vp__FillValue: -9999.0\n# vp_missing_value: -9999.0\n\nlongitude,latitude,Vp\n-123.0,45.0,6.5\n-122.0,45.0,6.6\n-123.0,46.0,6.4\n-122.0,46.0,6.7\n</code></pre> <p>Run: <pre><code>python tools/GeoCSV_2_netCDF.py -i data/example_2d.csv\n</code></pre></p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#typical-geocsv-example-3d","title":"Typical GeoCSV Example (3D)","text":"<pre><code># delimiter: ,\n# x_column: x\n# y_column: y\n# z_column: depth_km\n\n# vp_column: Vp\n# vp_variable: vp\n# vp_dimensions: 3\n# vp_units: km/s\n# vp_long_name: P-wave velocity\n# vp_display_name: Vp\n\nx,y,depth_km,Vp\n0,0,0,6.0\n0,0,50,7.0\n0,1,0,6.1\n0,1,50,7.1\n</code></pre> <p>Run: <pre><code>python tools/GeoCSV_2_netCDF.py -i data/example_3d.csv\n</code></pre></p>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#variable-mapping","title":"Variable Mapping","text":"<p>For each variable tag (e.g., <code>vp</code>), the script uses:  </p> <ul> <li><code>tag_column</code>: column name in the CSV  </li> <li><code>tag_variable</code>: output NetCDF variable name  </li> <li><code>tag_dimensions</code>: <code>2</code> or <code>3</code> </li> <li>Additional attributes copied directly (e.g., <code>units</code>, <code>long_name</code>)  </li> <li>Special handling:  </li> <li><code>tag__FillValue</code> \u2192 <code>fill_value</code> in NetCDF  </li> <li><code>tag_missing_value</code> \u2192 attribute only  </li> <li><code>tag__range</code> \u2192 numeric array attribute  </li> </ul>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#coordinate-variables","title":"Coordinate Variables","text":"<ul> <li>Created as 1D arrays: <code>y[y]</code>, <code>x[x]</code>, <code>z[z]</code> if 3D  </li> <li>Assigned from sorted unique values in data columns  </li> <li>Attributes may include <code>long_name</code>, <code>units</code>, <code>standard_name</code>, <code>_range</code>, <code>missing_value</code>, <code>_FillValue</code> </li> </ul>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#global-attributes-provenance","title":"Global Attributes &amp; Provenance","text":"<ul> <li>All <code># global_*: value</code> entries are written as NetCDF global attributes.  </li> <li>A <code>history</code> entry is appended: <pre><code>YYYY-mm-dd HH:MM:SS UTC Converted to NetCDF by GeoCSV_2_netCDF.py vYYYY.DDD from my_model.csv\n</code></pre></li> </ul>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#output-location-naming","title":"Output Location &amp; Naming","text":"<ul> <li>Input <code>/path/to/foo.csv</code> \u2192 Output <code>/path/to/foo.nc</code> </li> <li>With <code>-H</code>, no file is written; headers are displayed only.  </li> </ul>"},{"location":"how-to/emc-geocsv-2-netcdf-user-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>EMC User Guide </li> <li>EMC Model Files Standards and Conventions </li> <li>NetCDF to GeoCSV Converter Guide </li> <li>NetCDF to GeoJSON Converter Guide </li> </ul> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"how-to/emc-inspector-user-guide/","title":"EMC Inspector User Guide","text":""},{"location":"how-to/emc-inspector-user-guide/#introduction","title":"Introduction","text":"<p><code>emc_inspector.py</code> validates a NetCDF file against EarthScope's EMC conventions and common CF metadata expectations. It prints clear, emoji-marked results (\u2714\ufe0f / \u274c / \u26a0\ufe0f), plus a compact Metadata Inspection Summary at the end.</p>"},{"location":"how-to/emc-inspector-user-guide/#1-quick-start","title":"1. Quick Start","text":"<pre><code># From the EMC_Tools root (recommended)\npython src/emc_inspector.py\n\n# or, if you are inside that folder already\npython emc_inspector.py\n</code></pre> <p>When prompted:</p> <pre><code>Please enter the NetCDF file name: /path/to/model.nc\n</code></pre> <p>The script will:</p> <ol> <li>Open the file and detect the NetCDF format.</li> <li>Report dimensions, coordinate variables (primary &amp;     auxiliary), and identify a third dimension if present.</li> <li>Check latitude/longitude value ranges and report the longitude     system (0--360 or --180/180).</li> <li>Validate geospatial global attributes against computed values.</li> <li>Check required/optional global attributes.</li> <li>Run a CF compliance check via <code>cfchecks</code> (CF-1.0) if available.</li> <li>Summarize everything in Metadata Inspection Summary.</li> </ol>"},{"location":"how-to/emc-inspector-user-guide/#2-what-the-script-checks","title":"2. What the Script Checks","text":""},{"location":"how-to/emc-inspector-user-guide/#-file-type","title":"- File Type","text":"<p>Reports the underlying NetCDF container: - NETCDF-4 Classic Model: \u2714\ufe0f (Preferred) - NETCDF-4: \u274c (not preferred for EMC) - NETCDF-3 Classic / 64-bit offset: \u274c (not preferred) - Unknown/Errors: \u274c</p>"},{"location":"how-to/emc-inspector-user-guide/#-dimensions","title":"- Dimensions","text":"<p>Lists each dimension and its size, e.g.:</p> <pre><code>=== Dimensions and Sizes ===\n- longitude: 721 \u2714\ufe0f\n- latitude: 361 \u2714\ufe0f\n- depth: 100 \u2714\ufe0f\n</code></pre>"},{"location":"how-to/emc-inspector-user-guide/#-coordinate-information","title":"- Coordinate Information","text":"<p>Identifies primary coordinates (dimensions) and auxiliary coordinates (via the <code>coordinates</code> attribute found on variables).\\ It also tries to recognize a \"third dimension\" (e.g., <code>depth</code>).</p>"},{"location":"how-to/emc-inspector-user-guide/#-latitudelongitude-range-check","title":"- Latitude/Longitude Range Check","text":"<ul> <li>Detects whether longitude values look like 0--360 or     --180/180.</li> <li>Validates ranges:<ul> <li>Latitude must be within [-90, 90].</li> <li>Longitude must match the detected system.</li> </ul> </li> <li>Prints min/max for lat/lon and flags out-of-range values.</li> </ul>"},{"location":"how-to/emc-inspector-user-guide/#-geospatial-global-attributes","title":"- Geospatial Global Attributes","text":"<p>Confirms presence/values of:</p> <pre><code>geospatial_lat_min, geospatial_lat_max,\ngeospatial_lon_min, geospatial_lon_max,\ngeospatial_vertical_min, geospatial_vertical_max\n</code></pre> <p>Note: Values assigned to geospatial_* attributes must match the data type of their corresponding coordinate variables.</p> <ul> <li>If <code>depth</code> exists as a dimension, vertical attributes are     required.</li> <li>If values exist but are strings, that's flagged (they must be     numeric, see the Note above).</li> <li>Metadata values are compared to computed values from the data     with a default tolerance of 10% of the metadata value.</li> </ul>"},{"location":"how-to/emc-inspector-user-guide/#-global-attributes","title":"- Global Attributes","text":"<p>Required (must exist and often must start with a given prefix):</p> <pre><code>author_institution, author_name, Conventions (CF-1.0), data_revision (r*),\nid, Metadata_Conventions (\"Unidata Dataset Discovery v1.0\"),\nmodel, model_type, model_subtype, reference_pid (\"doi\"),\nreference, repository_institution (\"EarthScope DS\"),\nrepository_name (\"EMC\"), repository_pid (\"doi:\"),\nsummary, title, year\n</code></pre> <p>Optional (nice to have):</p> <pre><code>author_email, author_url, grid_ref (\"latitude_longitude\"),\nversion (\"v\"), grid_dim (\"3D\")\n</code></pre>"},{"location":"how-to/emc-inspector-user-guide/#-variables-summary","title":"- Variables Summary","text":"<p>Variables are grouped into: - Coordinate Variables (incl.\u00a0auxiliary); expected attributes depend on type: - Coordinates: <code>long_name</code>, <code>units</code>, <code>standard_name</code> - Depth/Elevation: <code>long_name</code>, <code>units</code>, <code>positive</code> - Model Variables (data variables): require <code>long_name</code>, <code>units</code>, <code>display_name</code>.</p> <p>For 3D model variables, it also validates dimension order. The guide encodes a preferred order based on the two primary spatial dims and the detected third dimension.</p>"},{"location":"how-to/emc-inspector-user-guide/#example-session","title":"Example Session","text":"<pre><code>$ python emc_inspector.py\n\n\nemc_inspector.py - checks a given NetCDF file against the EMC requirements and flags any missing or incorrectly defined attributes. \nThe check is not exhaustive, and visual validation is required to identify any additional errors.\n\n\nPlease enter the NetCDF file name: /data/models/ak135_emc_example.nc\n\n\n[INFO] emc_inspector.py version v2024.260\n\n=== NetCDF File Check ===\nFile: /data/models/ak135_emc_example.nc\nSize: 12.34 MB\nFile Type: NetCDF-4 Classic Model \u2714\ufe0f\n\n=== Dimensions and Sizes ===\n- longitude: 721 \u2714\ufe0f\n- latitude: 361 \u2714\ufe0f\n- depth: 100 \u2714\ufe0f\n\n=== Coordinate Information ===\nPrimary Coordinates: longitude, latitude, depth \u2714\ufe0f\nThird Dimension: depth \u2714\ufe0f\nAuxiliary Coordinates: time \u2714\ufe0f\n\n=== Latitude and Longitude Value Check ===\nLongitude Format: -180/180 degrees \u2714\ufe0f\nLatitude Range: -89.75 to 89.75 \u2714\ufe0f\nLongitude Range: -180.00 to 180.00 \u2714\ufe0f\n\n=== Geospatial Attributes Check ===\ngeospatial_lat_min: Metadata = -89.75, Computed = -89.75 \u2714\ufe0f\ngeospatial_lat_max: Metadata = 89.75, Computed = 89.75 \u2714\ufe0f\ngeospatial_lon_min: Metadata = -180.0, Computed = -180.0 \u2714\ufe0f\ngeospatial_lon_max: Metadata = 180.0, Computed = 180.0 \u2714\ufe0f\ngeospatial_vertical_min: Metadata = 0.0, Computed = 0.0 \u2714\ufe0f\ngeospatial_vertical_max: Metadata = 700.0, Computed = 700.0 \u2714\ufe0f\n\n=== Global Attributes Check ===\nGlobal attributes included (values not checked): \u2714\ufe0f\n- author_name: Jane Doe\n- author_institution: Example University\n- Conventions: CF-1.0\n...\n\n=== CF Compliance Check ===\nCF Compliance: Compliant \u2714\ufe0f\n\n=== Variables Summary ===\nCoordinate Variables:\n- latitude: Range = -89.750 to 89.750, Units = degrees_north, Dimensions = latitude \u2714\ufe0f\n- longitude: Range = -180.000 to 180.000, Units = degrees_east, Dimensions = longitude \u2714\ufe0f\n- depth: Range = 0.000 to 700.000, Units = km, Dimensions = depth \u2714\ufe0f\n\nModel Variables:\n- VS: Range = 3.000 to 4.900, Units = km/s, Dimensions = depth, latitude, longitude \u2714\ufe0f\n\n============================\n Metadata Inspection Summary\n============================\nFile Type: NetCDF-4 Classic Model \u2714\ufe0f\nDimensions:\n- longitude: 721\n- latitude: 361\n- depth: 100\nLongitude Format: -180/180 degrees\nLatitude Range: -89.750 to 89.750\nLongitude Range: -180.000 to 180.000\n...\n</code></pre>"},{"location":"how-to/emc-inspector-user-guide/#exit-codes-errors","title":"Exit Codes &amp; Errors","text":"<ul> <li>The script currently prints errors and does not use structured     exit codes for each failure.\\     For CI, you can detect failure patterns (<code>\u274c</code>, \"FAIL\", or \"Error\")     in stdout.</li> <li>If a file cannot be opened you'll see:     <code>Error: Unable to open the file '...'.</code></li> </ul>"},{"location":"how-to/emc-inspector-user-guide/#interpreting-results","title":"Interpreting Results","text":"<ul> <li>\u2714\ufe0f OK --- the item satisfies the EMC convention or an acceptable     default.</li> <li>\u26a0\ufe0f Warning --- optional or recommended item missing/ambiguous.</li> <li>\u274c Fail --- required item missing/invalid, or mismatch between     metadata and data values.</li> </ul> <p>The tool is not exhaustive. Always perform visual inspection and domain\u2011specific checks for scientific validity.</p>"},{"location":"how-to/emc-inspector-user-guide/#3-troubleshooting","title":"3. Troubleshooting","text":"<ul> <li>Unicode icons print as [OK]/[X]/[!]: Your terminal likely     doesn't support UTF\u20118; the script falls back automatically.</li> <li>\"CF compliance check failed\": Ensure <code>cfchecks</code> is installed and     on your <code>PATH</code>.</li> <li>Longitude wrap confusion: The script reports a \"Potentially     0--360 or --180/180\" message when the range is ambiguous (e.g.,     0--180). Inspect your data and set/verify the correct system.</li> </ul>"},{"location":"how-to/emc-inspector-user-guide/#4-contact-feedback","title":"4. Contact / Feedback","text":"<p>For questions, comments, or feedback, please email: \ud83d\udce7 data-help@earthscope.org</p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/","title":"NetCDF to GeoCSV Converter User Guide","text":""},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#introduction","title":"Introduction","text":"<p>The <code>netCDF_2_GeoCSV.py</code> script converts a 2D or 3D NetCDF Earth model into GeoCSV 2.0. It supports writing a single consolidated file or one file per depth level for 3D datasets. This ensures EMC models can be distributed in a lightweight, tabular format while preserving key metadata and attributes.  </p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#usage-examples","title":"Usage Examples","text":""},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#basic-command","title":"Basic command","text":"<pre><code>python src/netCDF_2_GeoCSV.py -i samples/CSEM2-Africa.v2024.12.01.r0.0-n4c.nc -x longitude -y latitude -z depth\n</code></pre> <ul> <li>Coordinate variable flags must match variables in your NetCDF file:</li> <li><code>-x &lt;X_VARIABLE&gt;</code> (e.g., <code>longitude</code> or <code>x</code>)  </li> <li><code>-y &lt;Y_VARIABLE&gt;</code> (e.g., <code>latitude</code> or <code>y</code>)  </li> <li><code>-z &lt;Z_VARIABLE&gt;</code> (e.g., <code>depth</code>) or <code>-z none</code> for 2D models  </li> </ul>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#command-line-flags","title":"Command-line flags","text":"Flag Long form Required Default Description <code>-i</code> <code>--input</code> \u2705 \u2014 Path to input NetCDF model. Looks in CWD, then <code>data/</code> if not found. <code>-x</code> <code>--xvar</code> \u2705 \u2014 Name of the x-axis variable (e.g., <code>longitude</code>, <code>x</code>). <code>-y</code> <code>--yvar</code> \u2705 \u2014 Name of the y-axis variable (e.g., <code>latitude</code>, <code>y</code>). <code>-z</code> <code>--zvar</code> \u2705 \u2014 Name of the z-axis variable (e.g., <code>depth</code>). For 2D, may be set to <code>none</code>. <code>-m</code> <code>--mode</code> <code>single</code> Output mode: <code>single</code> (all depths in one file) or <code>depth</code> (one file per depth, 3D only). <code>-d</code> <code>--debug</code> <code>False</code> Enable verbose debug output. <code>-H</code> <code>--header</code> <code>False</code> Print NetCDF and GeoCSV headers only, then exit. <p>Exit codes: <code>0</code> on success; non-zero for input or validation errors.  </p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#examples","title":"Examples","text":""},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#1-single-file-output-3d","title":"1. Single-file output (3D)","text":"<p><pre><code>python netCDF_2_GeoCSV.py -i samples/KEA20-Moho.r0.0.nc -x longitude -y latitude -z depth -m single\n</code></pre> Output: <code>models/MODEL_3D.csv</code></p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#2-one-file-per-depth-3d","title":"2. One file per depth (3D)","text":"<p><pre><code>python netCDF_2_GeoCSV.py -i samples/KEA20-Moho.r0.0.nc -x longitude -y latitude -z depth -m depth\n</code></pre> Output: <code>models/MODEL_3D_&lt;DEPTH&gt;_km.csv</code> for each depth level</p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#3-2d-model","title":"3. 2D model","text":"<p><pre><code>python src/netCDF_2_GeoCSV.py -i samples/KEA20-Moho.r0.0_1.nc -x latitude -y longitude -m single\n</code></pre> Output: <code>models/MODEL_2D.csv</code></p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#4-show-headers-only-2d","title":"4. Show headers only (2D)","text":"<p><pre><code>python src/netCDF_2_GeoCSV.py -i samples/KEA20-Moho.r0.0.nc -x longitude -y latitude -H\n</code></pre> Prints both the NetCDF header (dimensions, variables, globals) and the GeoCSV header that would be written, then exits.  </p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#output-structure","title":"Output Structure","text":""},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#geocsv-header-20","title":"GeoCSV Header (2.0)","text":"<p>The script writes a full header that includes:  </p> <ul> <li>Dataset metadata: <pre><code># dataset: GeoCSV2.0\n# created: &lt;UTC time&gt; (netCDF_2_GeoCSV.py)\n# netCDF_file: &lt;basename&gt;\n# delimiter: |\n</code></pre></li> <li>Global attributes: written as <code># global_&lt;attr&gt;: &lt;value&gt;</code> (with a <code>global_history</code> entry noting the conversion).  </li> <li>For each coordinate (<code>x</code>, <code>y</code>, <code>z</code> if 3D) and each model variable, the header includes:  </li> <li><code>_column</code>, <code>_variable</code>, <code>_dimensions</code> </li> <li>All NetCDF attributes (e.g., <code>long_name</code>, <code>units</code>, <code>standard_name</code>, <code>_FillValue</code>, <code>_range</code> if present).  </li> </ul> <p><code>_range</code> values are written as <code>min,max</code>.  </p>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#geocsv-data-section","title":"GeoCSV Data Section","text":"<ul> <li>3D / single mode: <pre><code>&lt;y&gt;|&lt;x&gt;|&lt;z&gt;|&lt;var_1&gt;|...|&lt;var_N&gt;\n</code></pre></li> <li>3D / depth mode: <pre><code># depth: &lt;value&gt;\n&lt;y&gt;|&lt;x&gt;|&lt;var_1&gt;|...|&lt;var_N&gt;\n</code></pre></li> <li> <p>2D: <pre><code>&lt;y&gt;|&lt;x&gt;|&lt;var_1&gt;|...|&lt;var_N&gt;\n</code></pre></p> </li> <li> <p>Delimiter is a pipe (<code>|</code>) to avoid conflicts with commas in float values.  </p> </li> <li>All values are written as strings to preserve precision. Missing values are written as <code>nan</code>.  </li> </ul>"},{"location":"how-to/emc-netcdf-2-geocsv-user-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>EMC User Guide </li> <li>EMC Model Files Standards and Conventions </li> <li>GeoCSV to NetCDF Converter Guide </li> <li>NetCDF to GeoJSON Converter Guide </li> </ul> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/","title":"NetCDF to GeoJSON Converter User Guide","text":""},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#introduction","title":"Introduction","text":"<p>The <code>netCDF_2_GeoJSON.py</code> script converts a NetCDF Earth model file into a GeoJSON footprint containing both the geographic bounding box and key metadata. This enables quick visualization of model coverage and inspection of metadata in a lightweight, widely supported format.  </p>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#usage-examples","title":"Usage Examples","text":""},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#basic-command","title":"Basic command","text":"<pre><code>python src/netCDF_2_GeoJSON.py -i /path/to/model.nc\n</code></pre>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#command-line-flags","title":"Command-line flags","text":"Flag Long form Required Value Description <code>-i</code> <code>--input</code> \u2705 Path to a NetCDF file Input NetCDF Earth model file <code>-h</code> <code>--help</code> \u274c \u2014 Show usage information and exit"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#example","title":"Example","text":"<pre><code>python src/netCDF_2_GeoJSON.py -i samples/KEA20-Moho.r0.0.nc\n# \u2192 writes KEA20-Moho.r0.0.geojson in the current directory\n</code></pre>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#output-structure","title":"Output Structure","text":"<ul> <li>Filename: <code>{input_stem}.geojson</code>   Example: <code>samples/KEA20-Moho.r0.0.geojson</code> </li> <li>Format: GeoJSON FeatureCollection containing one Feature.  </li> </ul>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#example-abridged","title":"Example (abridged)","text":"<pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [lon_min, lat_min],\n          [lon_max, lat_min],\n          [lon_max, lat_max],\n          [lon_min, lat_max],\n          [lon_min, lat_min]\n        ]]\n      },\n      \"properties\": {\n        \"model\": \"...\",\n        \"title\": \"...\",\n        \"summary\": \"...\",\n        \"reference\": \"...\",\n        \"reference_pid\": \"...\",\n        \"repository_doi\": \"...\",\n        \"year\": \"...\",\n        \"data_revision\": \"r0.0\",\n        \"version\": \"v0.0\",\n        \"model_type\": \"Tomography Earth Model\",\n        \"model_subtype\": \"Radially anisotropic S velocities (km/s) and Moho depth (km)\",\n        \"filename\": \"KEA20-Moho.r0.0.nc\",\n        \"size_mb\": 0.19,\n        \"format\": \"NETCDF4_CLASSIC\",\n        \"grid_ref\": \"latitude_longitude\",\n        \"projection_type\": \"geographic_wgs84\",\n        \"projection_notes\": \"Unprojected geographic coordinates, WGS 84 datum\",\n        \"grid_dim\": \"2D\",\n        \"geospatial_lat_min\": 15.0,\n        \"geospatial_lat_max\": 51.0,\n        \"geospatial_lat_resolution\": 0.20,\n        \"geospatial_lat_units\": \"degrees_north\",\n        \"geospatial_lon_min\": 70.0,\n        \"geospatial_lon_max\": 150.0,\n        \"geospatial_lon_resolution\": 0.20,\n        \"geospatial_lon_units\": \"degrees_east\",\n        \"geospatial_vertical_min\": 0.0,\n        \"geospatial_vertical_max\": 0.0,\n        \"geospatial_vertical_units\": \"\",\n        \"variables\": {\n          \"moho\": \"Moho depth relative to a mean Earth radius of 6371 km\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Note: The footprint polygon is assumed to be in geographic (WGS84) coordinates. The script does not perform reprojection; it uses metadata attributes directly.  </p>"},{"location":"how-to/emc-netcdf-2-geojson-user-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>EMC User Guide </li> <li>EMC Model Files Standards and Conventions </li> <li>GeoCSV to NetCDF Converter Guide </li> <li>NetCDF to GeoCSV Converter Guide </li> </ul> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"reference/emc-csv-to-geocsv/","title":"Convert CSV to GeoCSV (EMC)","text":"<p>This guide shows how to turn a plain CSV table into a valid GeoCSV file that EMC tools can ingest \u2014 using the sample header templates in <code>samples/</code>.</p> <p>GeoCSV = header (lines starting with <code>#</code>) + your CSV data. You can usually make one by concatenating a prepared header file and your CSV body.</p>"},{"location":"reference/emc-csv-to-geocsv/#what-is-geocsv-in-emc","title":"What is GeoCSV (in EMC)?","text":"<p>GeoCSV is a simple, text-based format: - A header block of metadata lines beginning with <code># key: value</code> - Followed by a data table (comma-separated by default) - For gridded Earth models, the header declares which columns are coordinates (<code>x</code>, <code>y</code>, optional <code>z</code>) and which columns are model variables (e.g., <code>vp</code>, <code>vs</code>, <code>rho</code>).</p> <p>This repository provides three header templates:</p> <ul> <li><code>samples/header_2D.csv</code> \u2013 2D models (y, x + variables)</li> <li><code>samples/header_3D.csv</code> \u2013 3D models (y, x, z + variables)</li> <li><code>samples/header_3D_projected.csv</code> \u2013 3D with a projected CRS (e.g., UTM) and geographic lat/lon variables</li> </ul> <p>Each template already includes the required GeoCSV keys, for example: <pre><code># dataset: GeoCSV2.0\n# delimiter: ,\n# y_column: latitude\n# x_column: longitude\n# z_column: depth             &lt;-- only in 3D\n# vp_column: vp               &lt;-- example model variable\n# vp_units: km/s\n...\nlatitude,longitude,depth,vp,vs,rho    &lt;-- FIRST non-# line is the CSV header row\n</code></pre></p>"},{"location":"reference/emc-csv-to-geocsv/#prerequisites","title":"Prerequisites","text":"<ul> <li>Your CSV data file (no <code>#</code> lines) \u2014 call it <code>my_data.csv</code></li> <li>One of the header templates from <code>samples/</code></li> <li>UTF\u20118 encoding, Unix line endings (<code>\\n</code>) recommended</li> <li>Column names in the first row must match the header\u2019s <code>*_column:</code> values</li> </ul> <p>Optional, for validation: - <code>GeoCSV_2_netCDF.py</code> (in EMC_Tools) to convert GeoCSV \u2192 NetCDF for quick checks - <code>emc_inspector.py</code> to verify NetCDF compliance</p>"},{"location":"reference/emc-csv-to-geocsv/#quick-recipe-concatenate-header-data","title":"Quick recipe (concatenate header + data)","text":"<p>Pick the right header and concatenate with your data:</p>"},{"location":"reference/emc-csv-to-geocsv/#2d-model","title":"2D model","text":"<pre><code># Inspect the header template\nsed -n '1,80p' samples/header_2D.csv\n\n# Ensure your CSV header row matches the template\u2019s *_column names\nhead -1 my_data.csv\n\n# Build GeoCSV\ncat samples/header_2D.csv my_data.csv &gt; out_2D.geocsv.csv\n</code></pre>"},{"location":"reference/emc-csv-to-geocsv/#3d-model-geographic-latlondepth","title":"3D model (geographic lat/lon/depth)","text":"<pre><code>sed -n '1,80p' samples/header_3D.csv\nhead -1 my_data.csv\ncat samples/header_3D.csv my_data.csv &gt; out_3D.geocsv.csv\n</code></pre>"},{"location":"reference/emc-csv-to-geocsv/#3d-model-projected-crs-latlon","title":"3D model (projected CRS + lat/lon)","text":"<pre><code>sed -n '1,120p' samples/header_3D_projected.csv\nhead -1 my_data.csv\ncat samples/header_3D_projected.csv my_data.csv &gt; out_3D_proj.geocsv.csv\n</code></pre> <p>Tip: The output filename extension is arbitrary (<code>.csv</code> is fine). EMC tools look at the header keys, not the file extension.</p>"},{"location":"reference/emc-csv-to-geocsv/#mapping-your-csv-columns","title":"Mapping your CSV columns","text":"<p>Your CSV\u2019s first row must contain column names. The header\u2019s <code>*_column:</code> keys must point to those exact names. Examples:</p>"},{"location":"reference/emc-csv-to-geocsv/#2d","title":"2D","text":"<ul> <li><code># y_column: latitude</code></li> <li><code># x_column: longitude</code></li> <li>Model variables:</li> <li><code># vp_column: vp</code></li> <li><code># vp_units: km/s</code></li> <li><code># vp_long_name: P-wave velocity</code></li> </ul>"},{"location":"reference/emc-csv-to-geocsv/#3d","title":"3D","text":"<ul> <li><code># y_column: latitude</code></li> <li><code># x_column: longitude</code></li> <li><code># z_column: depth</code> (positive down usually; make sure units are clear)</li> <li>Variables as above</li> </ul>"},{"location":"reference/emc-csv-to-geocsv/#3d-projected","title":"3D projected","text":"<ul> <li>Projected axes:</li> <li><code># y_column: y</code> (easting or northing depending on your convention)</li> <li><code># x_column: x</code></li> <li><code># z_column: depth</code></li> <li>Geographic variables also present so the tools can convert/plot:</li> <li><code># latitude_column: latitude</code></li> <li><code># longitude_column: longitude</code></li> <li>CRS metadata (in the header):</li> <li><code># grid_ref: projected</code> (and <code># utm_zone: 11N</code>, <code># ellipsoid: WGS84</code>, etc.)</li> <li><code># geospatial_*_units: meters</code> for x/y if they are projected</li> </ul> <p>Edit the template to match your column names, units, and descriptions.</p>"},{"location":"reference/emc-csv-to-geocsv/#validate-your-geocsv","title":"Validate your GeoCSV","text":""},{"location":"reference/emc-csv-to-geocsv/#1-convert-to-netcdf-fast-structural-check","title":"1) Convert to NetCDF (fast structural check)","text":"<pre><code># Show header only (no file written)\npython GeoCSV_2_netCDF.py -i out_2D.geocsv.csv -H\n\n# Write a NetCDF4 Classic file\npython GeoCSV_2_netCDF.py -i out_2D.geocsv.csv\n# \u2192 produces out_2D.geocsv.nc (or &lt;input&gt;.nc)\n</code></pre>"},{"location":"reference/emc-csv-to-geocsv/#2-inspect-the-resulting-netcdf-optional","title":"2) Inspect the resulting NetCDF (optional)","text":"<pre><code># Quick look using ncdump (if available)\nncdump -h out_2D.geocsv.nc\n\n# EMC inspector (checks EMC/CF requirements)\npython emc_inspector.py\n# (You'll be prompted for the file name: enter: out_2D.geocsv.nc)\n</code></pre> <p>If <code>emc_inspector.py</code> flags issues (e.g., missing units), update the GeoCSV header and re-run the conversion.</p>"},{"location":"reference/emc-csv-to-geocsv/#example-end-to-end-workflows","title":"Example end-to-end workflows","text":""},{"location":"reference/emc-csv-to-geocsv/#a-2d-model-latlon","title":"A) 2D model (lat/lon)","text":"<ol> <li>Prepare <code>my_data.csv</code> with columns:    <pre><code>latitude,longitude,vp,vs\n34.5,-117.0,6.10,3.50\n34.6,-117.1,6.05,3.48\n...\n</code></pre></li> <li>Edit <code>samples/header_2D.csv</code> to ensure:    <pre><code># y_column: latitude\n# x_column: longitude\n# vp_column: vp\n# vs_column: vs\n# vp_units: km/s\n# vs_units: km/s\n# delimiter: ,\n</code></pre></li> <li>Build and validate:    <pre><code>cat samples/header_2D.csv my_data.csv &gt; my_model_2D.csv\npython GeoCSV_2_netCDF.py -i my_model_2D.csv\npython emc_inspector.py   # then enter: my_model_2D.nc\n</code></pre></li> </ol>"},{"location":"reference/emc-csv-to-geocsv/#b-3d-model-latlondepth","title":"B) 3D model (lat/lon/depth)","text":"<ol> <li><code>my_data.csv</code>:    <pre><code>latitude,longitude,depth,vp\n34.5,-117.0,0.0,5.90\n34.5,-117.0,5.0,6.05\n...\n</code></pre></li> <li>Edit <code>samples/header_3D.csv</code>:    <pre><code># z_column: depth\n# depth_units: km\n# geospatial_vertical_positive: down\n</code></pre></li> <li>Concatenate and convert:    <pre><code>cat samples/header_3D.csv my_data.csv &gt; my_model_3D.csv\npython GeoCSV_2_netCDF.py -i my_model_3D.csv\npython emc_inspector.py   # enter: my_model_3D.nc\n</code></pre></li> </ol>"},{"location":"reference/emc-csv-to-geocsv/#c-3d-projected-eg-utm-11n-meters","title":"C) 3D projected (e.g., UTM 11N, meters)","text":"<ol> <li><code>my_data.csv</code>:    <pre><code>x,y,depth,latitude,longitude,vp\n379000,3768000,0.0,34.50,-117.00,6.10\n379000,3768000,5.0,34.50,-117.00,6.18\n...\n</code></pre></li> <li>Edit <code>samples/header_3D_projected.csv</code>:    <pre><code># grid_ref: projected\n# utm_zone: 11N\n# ellipsoid: WGS84\n# x_units: meters\n# y_units: meters\n# latitude_column: latitude\n# longitude_column: longitude\n</code></pre></li> <li>Concatenate and convert:    <pre><code>cat samples/header_3D_projected.csv my_data.csv &gt; my_model_3D_proj.csv\npython GeoCSV_2_netCDF.py -i my_model_3D_proj.csv\npython emc_inspector.py   # enter: my_model_3D_proj.nc\n</code></pre></li> </ol>"},{"location":"reference/emc-csv-to-geocsv/#common-pitfalls-fixes","title":"Common pitfalls &amp; fixes","text":"<ul> <li>Header/data delimiter mismatch: If your CSV uses <code>;</code> or <code>|</code>, set <code># delimiter: ;</code> (or <code>|</code>) in the header.</li> <li>Column names don\u2019t match: The header\u2019s <code>*_column</code> values must match the CSV header row exactly.</li> <li>Units missing: Provide <code>&lt;var&gt;_units</code> key for every variable and coordinate.</li> <li>Depth sign/origin: Clarify with <code>geospatial_vertical_positive: down</code> (commonly for depth), and set <code>depth_units</code>.</li> <li>Projected models without lat/lon: For EMC tools, include both projected coordinates and latitude/longitude.</li> <li>Encoding/BOM: Save in UTF\u20118 without BOM.</li> <li>Sorting: Not required for GeoCSV, but <code>GeoCSV_2_netCDF.py</code> will sort when building gridded arrays.</li> </ul>"},{"location":"reference/emc-csv-to-geocsv/#next-steps","title":"Next steps","text":"<ul> <li>Convert GeoCSV \u2192 NetCDF: <code>python GeoCSV_2_netCDF.py -i my_model.csv</code></li> <li>Validate the NetCDF: <code>python emc_inspector.py</code> (enter the produced <code>.nc</code> file)</li> <li>Contribute the model following: <code>docs/how-to/model-contribution-guide.md</code></li> </ul>"},{"location":"reference/emc-model-contribution-guide/","title":"EMC Model Contribution Guidelines","text":""},{"location":"reference/emc-model-contribution-guide/#introduction","title":"Introduction","text":"<p>The Earth Model Collaboration (EMC) is a community-supported repository for Earth models, created to facilitate the sharing, previewing, and access of diverse geophysical Earth models. Authors of Earth models are strongly encouraged to contribute their models to the repository, supporting greater visibility and accessibility within the research community.  </p> <p>If you are interested in contributing, please follow the guidelines below to ensure your model can be seamlessly integrated into EMC.</p>"},{"location":"reference/emc-model-contribution-guide/#submission-checklist","title":"Submission Checklist","text":"<p>All contributed models must be described in a peer-reviewed publication. Please include DOI of the associated peer-reviewed article.  </p> <p>Before submitting your model to EMC, review the EMC Standards and Conventions and confirm that your submission meets the following requirements:</p> <ol> <li>Save model data in NetCDF-4 Classic format (use compression for large files).  </li> <li>Ensure that metadata is CF-compliant.  </li> <li>Include all required global attributes (Note: See the header templates under samples/ for the required attributes). </li> <li>Document the coordinate system (geographic or projected).  </li> <li>Verify that geospatial bounds are correctly defined in metadata.  </li> <li>Validate metadata compliance using the EMC Metadata Inspector.  </li> <li>Preview and verify model data integrity with the EMC Model Explorer.  </li> <li>Submit your final model file and publication reference to:    \ud83d\udce7 data-help@earthscope.org.  </li> </ol>"},{"location":"reference/emc-standards-conventions/","title":"EMC Model Files Standards and Conventions","text":""},{"location":"reference/emc-standards-conventions/#introduction","title":"Introduction","text":"<p>The EMC Standards and Conventions define the supported file formats, metadata requirements, and coordinate systems to ensure a consistent approach to creating, distributing, and using EMC model files. Adhering to these conventions improves the consistency, interoperability, and reliability of contributed models, enabling more effective collaboration and data sharing across the community.  </p> <p>This guide highlights the critical role of metadata, specifying the required attributes, their formats, and guidelines for coordinate system usage. Following these practices helps minimize distortion, improve accuracy, and maintain the overall integrity and usability of EMC data and tools.  </p> <p>Contributed Earth models are available for download from the EarthScope Data Repository. For interactive filtering and selection of models, visit the EMC Model Filtering &amp; Access API.  </p>"},{"location":"reference/emc-standards-conventions/#file-format-standards","title":"File Format Standards","text":"<p>This section describes the required formats for EMC model files and the benefits of adopting the current standards.</p>"},{"location":"reference/emc-standards-conventions/#required-format","title":"Required Format","text":"<ul> <li>File format: All EMC models must use NetCDF-4 Classic as the required container format.   Note: earlier versions of the EMC standard specified NetCDF-3 Classic).  </li> <li>Compression: Apply compression for large models to reduce file size and improve data transfer efficiency.  </li> <li>Metadata Compliance: Ensure all models are CF-compliant and fully compatible with EMC-Tools.  </li> </ul>"},{"location":"reference/emc-standards-conventions/#format-conversion","title":"Format Conversion","text":"<ul> <li>Use the EMC-Tools utilities to convert Earth model files between GeoCSV and NetCDF-4 Classic.  </li> <li>The transition from NetCDF-3 Classic to NetCDF-4 Classic provides key benefits:  <ul> <li>Enable internal compression and chunking to reduce storage and transfer costs.  </li> <li>Maintain backward compatibility with the NetCDF-3 data model to ensure broad software support.  </li> <li>Adopt a modern container format that improves long-term sustainability and usability of EMC model files.  </li> </ul> </li> </ul>"},{"location":"reference/emc-standards-conventions/#metadata-requirements","title":"Metadata Requirements","text":"<p>All EMC NetCDF files must include metadata following the CF Metadata Conventions. In addition, EMC introduces the following required attributes:</p>"},{"location":"reference/emc-standards-conventions/#source-variable-level-attribute","title":"<code>source</code> (Variable-Level Attribute)","text":"<p>Each model data variable must include a <code>source</code> attribute describing the origin of the data:</p> <ul> <li>If derived from observations:  </li> </ul> <pre><code>vp:source = data-derived  \n</code></pre> <ul> <li>If derived from an empirical formula:   Include the formula or reference. Example:  </li> </ul> <pre><code>vs:source = assumed to follow vp as vs = vp / sqrt(3)  \n</code></pre>"},{"location":"reference/emc-standards-conventions/#data_layout-global-attribute","title":"<code>data_layout</code> (Global Attribute)","text":"<p>Specifies the layout of data in the file:</p> <ul> <li><code>vertex</code> \u2014 values specified at vertices  </li> <li><code>cell</code> \u2014 values specified at the centers of grid cells  </li> </ul> <p>If <code>data_layout</code> is not defined, the default <code>vertex</code> is assumed.  </p>"},{"location":"reference/emc-standards-conventions/#coordinate-systems-grid_ref","title":"Coordinate Systems (<code>grid_ref</code>)","text":"<p>The <code>grid_ref</code> attribute specifies the coordinate system used in the model file:</p> <ul> <li>The default coordinate system is geographic:  </li> </ul> <pre><code>grid_ref = latitude_longitude  \n</code></pre> <ul> <li>Models using a projected coordinate system (e.g., UTM) must include variables for both the projected coordinates and the geographic latitude/longitude coordinates.  </li> <li>The value of <code>grid_ref</code> should indicate the projection used, and metadata must clearly document the projection, including EPSG codes where applicable.  </li> </ul>"},{"location":"reference/emc-standards-conventions/#additional-resources","title":"Additional Resources","text":"<p>The following resources provide additional standards, guidelines, and workflows for contributing and maintaining EMC models:</p> <ul> <li>EMC User Guide \u2014 overview of EMC, how to access model files, and how to use EMC-Tools.  </li> <li>Contribute Models to EMC \u2014 guidelines for contributing new models to EMC.  </li> <li>Convert CSV Files to GeoCSV \u2014 instructions for converting a plain CSV table into a valid GeoCSV file that EMC tools can ingest.  </li> <li>Update an Existing Model \u2014 explain how to update an existing Earth model in EMC.  </li> </ul> <p>Comments or Questions? For any questions or feedback about EMC Earth models or EMC-Tools, please email: data-help@earthscope.org </p>"},{"location":"reference/emc-update-existing-model/","title":"How to Update an Existing Model in the EarthScope Earth Model Collaboration (EMC)","text":"<p>This guide explains the process for updating an existing Earth model in EMC.</p>"},{"location":"reference/emc-update-existing-model/#1-determine-the-versionrevision-number","title":"1. Determine the Version/Revision Number","text":"<p>If the model data has changed, you must decide on an appropriate version or revision number before submission. - Version: Use when significant scientific changes are made (e.g., new methodology, added datasets). - Revision: Use for corrections, minor updates, or formatting changes.</p> <p>Example: - Previous: <code>r0.0</code> - Minor revision: <code>r0.1</code> - Major update: <code>r1.0</code></p>"},{"location":"reference/emc-update-existing-model/#2-document-the-changes","title":"2. Document the Changes","text":"<p>Provide a short paragraph summarizing what has changed in the new version. This will be included in the EMC model description page.</p> <p>Example:</p> <p>This update corrects a sign error in the Vs parameter at depths greater than 100 km and includes new measurements for the western region based on 2024 seismic data.</p>"},{"location":"reference/emc-update-existing-model/#3-validate-metadata-with-the-emc-inspector","title":"3. Validate Metadata with the EMC Inspector","text":"<p>Run the EMC Inspector tool to ensure the new NetCDF file's metadata follows EMC and CF conventions. - Check that all required global and variable attributes are present. - Verify that <code>data_layout</code> and <code>source</code> attributes are properly set. - Ensure <code>geospatial</code> attributes match the coordinate ranges in the data.</p> <p>Command example: <pre><code>python emc_inspector.py your_model_file.nc\n</code></pre></p>"},{"location":"reference/emc-update-existing-model/#4-validate-data-content-with-the-emc-explorer","title":"4. Validate Data Content with the EMC Explorer","text":"<p>Use the EMC Explorer tool to visually inspect and verify that the data values are correct. - Plot key variables. - Check for unexpected gaps or anomalies. - Verify coordinate grids and projections.</p> <p>Command example: <pre><code>python emc_explorer.py your_model_file.nc\n</code></pre></p>"},{"location":"reference/emc-update-existing-model/#5-send-the-update-to-earthscope","title":"5. Send the Update to EarthScope","text":"<p>Once validated:</p> <ol> <li>Attach the updated NetCDF file.</li> <li>Include your change description paragraph.</li> <li>State the new version/revision number.</li> <li>Send everything to: data-help@earthscope.org</li> </ol> <p>Important: If you have already communicated about this model via <code>data-help@earthscope.org</code>, always reply to one of the existing email threads instead of starting a new one. This ensures your update is tracked under the same ticket.</p> <p>Following these steps will help ensure smooth and accurate updates to your EMC model.</p>"}]}